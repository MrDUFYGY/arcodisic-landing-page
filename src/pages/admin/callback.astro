---
// Página de callback para OAuth
// Esta página recibe el token de autenticación de Google y redirige al admin
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="robots" content="noindex">
  <title>Autenticando - Arcodisic CMS</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    .callback-container {
      background: white;
      border-radius: 16px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      padding: 48px;
      max-width: 400px;
      width: 100%;
      text-align: center;
    }

    .spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #667eea;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      animation: spin 1s linear infinite;
      margin: 0 auto 24px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    h1 {
      color: #333;
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 12px;
    }

    p {
      color: #666;
      font-size: 14px;
      line-height: 1.6;
    }

    .error {
      background: #fee;
      color: #c33;
      padding: 16px;
      border-radius: 8px;
      margin-top: 24px;
      font-size: 14px;
      display: none;
    }

    .error.show {
      display: block;
    }

    .retry-button {
      margin-top: 16px;
      padding: 12px 24px;
      background: #667eea;
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .retry-button:hover {
      background: #5568d3;
      transform: translateY(-2px);
    }
  </style>
</head>
<body>
  <div class="callback-container">
    <div class="spinner"></div>
    <h1>Autenticando...</h1>
    <p>Por favor espera mientras verificamos tu identidad.</p>
    
    <div id="error" class="error">
      <p id="errorMessage"></p>
      <button class="retry-button" onclick="window.location.href='/admin/login'">
        Volver a intentar
      </button>
    </div>
  </div>

  <script>
    import { supabase } from '../../lib/supabase';

    async function handleCallback() {
      try {
        // Obtener el hash de la URL que contiene el token
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        const accessToken = hashParams.get('access_token');
        const refreshToken = hashParams.get('refresh_token');

        if (!accessToken) {
          throw new Error('No se recibió el token de autenticación');
        }

        // Verificar la sesión
        const { data: { session }, error: sessionError } = await supabase.auth.getSession();

        if (sessionError) {
          throw sessionError;
        }

        if (!session) {
          // Si no hay sesión, intentar establecerla con el token
          const { data: { session: newSession }, error: setSessionError } = 
            await supabase.auth.setSession({
              access_token: accessToken,
              refresh_token: refreshToken || '',
            });

          if (setSessionError) {
            throw setSessionError;
          }

          if (!newSession) {
            throw new Error('No se pudo establecer la sesión');
          }
        }

        // Autenticación exitosa, redirigir al admin
        console.log('✅ Autenticación exitosa');
        
        // Esperar un momento para que se guarde la sesión
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Redirigir al panel de admin
        window.location.href = '/admin';

      } catch (error) {
        console.error('❌ Error en callback:', error);
        
        // Mostrar error
        const errorDiv = document.getElementById('error');
        const errorMessage = document.getElementById('errorMessage');
        
        if (errorDiv && errorMessage) {
          errorMessage.textContent = error instanceof Error 
            ? `Error: ${error.message}` 
            : 'Error desconocido durante la autenticación';
          errorDiv.classList.add('show');
        }

        // Ocultar spinner
        document.querySelector('.spinner')?.remove();
        document.querySelector('h1')!.textContent = 'Error de Autenticación';
        document.querySelector('p')!.textContent = 'No se pudo completar el proceso de autenticación.';
      }
    }

    // Ejecutar el callback cuando cargue la página
    handleCallback();
  </script>
</body>
</html>
